Usage of the DART Assembler
===========================

.. _simple_octahedral_assembly:

.. contents::
   :local:
   :depth: 2

This section demonstrates a basic example of using the DART assembler to generate 100 octahedral Pd(II) complexes with a total charge of zero. These complexes will have a 3-2-1 topology, consisting of one tridentate, one bidentate, and one monodentate ligand. For now, we will use the entire MetaLig database as source for the ligands. Later, we will learn how to filter the ligands to fit a desired chemistry or to use those that are more likely to form stable complexes.

Initial Checks
--------------

First, open your terminal and run '``dart --help``' to confirm that DART is installed in the currently activated Conda environment. If this command fails, refer to the troubleshooting section under :ref:`troubleshooting`.

Setting Up
----------

1. **Create an Output Folder**: Open the terminal and run:

.. code-block:: bash

    mkdir dart_usage
    cd dart_usage

2. **Create the Input YAML File**: Make a file named '``assembly_input.yml``' and fill it with the following content. For a detailed explanation of the assembly input parameters see the :ref:`assembly_input` section.

.. code-block::

    output_path: DART_output              # Path to the output folder.
    overwrite_output: false               # Whether to overwrite the output if it already exists. Recommended: false.

    ffmovie: true                         # Whether to output a movie of the optimization process. Set to false to save disk space.
    concatenate_xyz: true                 # Whether to concatenate the xyz files of the optimization process.
    verbosity: 2                          # How much output to print. Options: (0, 1, 2, 3), recommended is 2.
    complex_name_length: 8                # Length of the complex name. Recommended: 8.

    batches:                              # List of batches to generate. The first option in each batch needs a hyphen ('-') in front of it to mark the start of the batch.
      - name: Octahedral_Pd(II)           # Name of the batch. Note the hyphen in front of it to mark the start of the batch.
        topology: 3-2-1                   # Topology of the complexes. Options: 2-1-1, 2-2, 3-2-1, 4-1-1, 5-1
        ligand_db_paths:                  # Path to the ligand database. Either single path or list of [path, 'same_ligand_as_previous'].
        ligand_choice: random             # How to choose the ligands. Options: random, all
        max_num_complexes: 100            # Maximum number of complexes to generate.
        metal:
          element: Pd                     # Chemical symbol of the desired metal center.
          oxidation_state: 2              # Oxidation state of the desired metal center.
          spin: 0                         # Spin of the desired metal center. Only needed for later DFT or xtb structure relaxations.
        total_charge: 0                   # Total charge of the complex.
        forcefield: true                  # Whether to optimize the structures after generation with a force field.
        isomers: lowest_energy            # Which isomers to generate. Options: lowest_energy, all
        bidentate_rotator: auto           # How to rotate the bidentate ligands. Options: horseshoe, slab, auto
        gaussian_input_filepath:          # Path to the Gaussian config file. If not given, no Gaussian input files are generated.
        geometry_modifier_filepath:       # Path to the geometry modifier file. If not given, no geometry modification is performed.
        random_seed: 0                    # Random seed for the generation of the complexes.
        complex_name_appendix:            # String to append to the randomly generated complex name.

Running the Assembler
---------------------

Execute the following command in your terminal:

.. code-block:: bash

    dart assembler --path assembly_input.yml

This command initiates the assembler module, which will generate the complexes and write the output to the folder '``DART_output``'.

Understanding the Output
------------------------

The '``DART_output``' folder will contain all the output files. For a detailed explanation of all the output files, see the :ref:`assembly_output` section.

To demonstrate the wealth of information coming with each assembled complex let us have a closer look at the complex named KOXUGUKU. This complex was generated by DART and is described by the following files:

**KOXUGUKU_structure.xyz:**
    The complex geometry described in 'KOXUGUKU_structure.xyz' is shown in the figure below. It is an octahedral ligand with a Pd metal center and three different ligands; one tridentate, one bidentate and one monodentate.

**KOXUGUKU_ligandinfo.csv:**
    .. csv-table:: KOXUGUKU_ligandinfo.csv
       :file: KOXUGUKU_ligandinfo.csv
       :widths: 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9
       :header-rows: 1
    The ligand information file contains an excerpt of the MetaLig database for the ligands that make up the complex. It is useful for quickly checking the ligand properties without having to open the MetaLig database. The file contains a variety of intrinsic properties for each ligand such as stoichiometry, denticity, donor atoms and formal charge. Note that the charges of the ligands add up to -2 to compensate for the specified Pd oxidation state of +2 and overall charge of zero.

    Besides the chemical information, the file also contains extrinsic information about the complexes in the Cambridge Structural Database (CSD) that contain this ligand. These extrinsic properties include the IDs of each complex, the number of occurrences and all metal centers the ligand was found with. This extrinsic information cam be used in the ligand filters to choose ligands that are likely to form stable complexes. It is also helpful when it comes to synthesizing the complexes, as the CSD IDs can be used to find all published synthesis protocols for the complexes.

**KOXUGUKU_ffmovie.xyz:**
    The trajectory shown in this file demonstrates the forcefield relaxation of the DART generated complex. In this case, the geometry assembled by the DART assembler is already very close and the forcefield only relaxes the structure slightly.

**KOXUGUKU_data.json:**
    This file contains a wealth of information about the complex in a machine-readable format, for example the molecular graph of the complex. It is useful for post-processing the complexes with other programs.





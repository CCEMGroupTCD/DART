# Changelog

## 22.12.22 Timo refactoring before Christmas

### OUTPUT:

#### possibly breaking changes:

    - molecule['atomic_props']:
        --> Possibly breaks only the charge assignment scripts. The assembly should not be affected. I checked and the input dictionary of the assembly had the `atomic_props` already in the new list format.
        - The format of this property changed. Instead of using the old format as 
            - {'atomic_props': {
                                'x': {1: ('H', 1.234), 2: ('C', 0.345), ...},
                                ...
                                }
               }
        we switched to a new format, based on simple lists:
            - {'atomic_props': {
                                'x': [1.234, 0.345, ...],       --> length = number of atoms
                                'y': ...,
                                'z': ...,
                                'partial_charge': [0.234, -0.2342, ...],
                                'atoms': ['H', 'C', ...]
                                }
               }
          The reason is that this is already used in the assembly. Since we had to decide between one, we should just go for the simpler one now. Besides, Cian's charge assignment has an input controller so this is very simple to fix, and in the linear charge solver, I don't think it is even used.
    - the properties `original_metal` and `original_metal_symbol` were deleted from each ligand in the database of unique ligands.
        The metal of origin is not a property that makes sense for unique ligands, since they will usually come from many different metals.
        Instead, the property `count_metals` was added to backtrack which unique ligand occurs in which metals, see below.
        The ligands in the database of all (not only unique) ligands of course still have these properties. This should break only the assembly.
    - for ligands and unique ligands, most `global_props` information except `CSD_code` was deleted
	    - so far, global_props were inherited from the complex when generating the ligand. Mostly this information is stuff like electronic properties of the complex from the tmQMg, which don't make sense for the ligand. Therefore this information is not inherited anymore. As far as I am aware, this should not break anything since this information would not be useful in the first place.


#### All changes

complex_db.json:
    - not fully connected complexes are filtered out now since these are most likely erroneous (n~2k)
    - added properties
        - `stoichiometry` (str)     	--> stoichiometry in the Hill standard, i.e. first C, then H, then everything else sorted alphabetically
        - `mol_id` (str)	    	    --> CSD code
        - ligands:
            - `is_chosen_unique_ligand` (bool)      --> if this ligand is the representative of same ligands in the unique ligand db. Is a property of ligands in the ligand db as well, but not in the unique ligand db.

tmQM_Ligands_unique.json:
    - added properties:
        - `stoichiometry` (str)
        - `local_elements` (list) 	    --> elements coordinated to metal, in the same order as `ligand_to_metal`
        - `occurrences` (int) 		    --> how often this unique ligand occurs in the complex_db
        - `count_denticities` (dict) 	--> the distribution of how often this unique ligand has which denticity in the format {denticity: count}
        - `count_metals` (dict) 	    --> the distribution of how often this unique ligand was detected with which metal in the format {metal: count}
        - `n_denticities` (int) 	    --> how many different denticities this unique ligand has (equals len(count_denticities))
        - `n_metals` (int) 		        --> how many different metals this unique ligand has (equals len(count_metals))
        - `all_ligand_names` (list) 	--> all `name` attributes of this ligand in the complex_db
        - atomic_props:
            - original_complex_indices (list of int) 	--> the original indices of the atoms in the complex where this ligand came from

tmQM_Ligands_full.json:
    - removed properties
        - `global_props`: everything apart from `CSD_code`. The rest was information inherited from the complex of origin, like electronic properties of the complex.
	- `original_metal`
    - added properties
        - `stoichiometry` (str)
        - `local_elements` (list)
        - `original_metal_symbol` (str)
        - `is_chosen_unique_ligand` (bool)
        - `unique_ligand_information` (dict) 	    --> properties from the unique ligand that might be interesting for debugging
            - `occurrences` (int)
            - `count_denticities` (dict)
            - `count_metals` (dict)
            - `n_denticities` (int)
            - `n_metals` (int)

### CODE:

RCA_Molecule:
    - added attribute `stoichiometry` in init which is a string of the stoichiometry in Hill notation (the default in ase).
        - added method `get_standardized_stoichiometry()` which outputs the stoichiometry as a string in Hill notation.
        - removed (i.e. block-commented) method `get_stoichiometry()`
    - added optional init input `reindex_graph=False` which re-indexes `self.graph` so that the ordering of the indices stays the same but now they go from 0 to n-1 instead of keeping the original index of the complex.
    - made ligand order deterministic, it was random before
    - fixed one-off error with `ligand_to_metal` that Cian discovered (actually Felix already pushed this before, just mentioning it for completeness)
    - graph
        - removed all information except `node_label` from nodes and all information from edges
            - can be easily turned off but was main reason for very overblown memory
        - added node attributes which are not necessary but may be useful for debugging and cross-checking
            - `orig_idx` (int) --> original index of atom in complex (is always the same as the index in the not re-indexed graph)
            - `metal_neighbor` (bool) --> a flag indicating if this atom was connected to the metal

RCA_Ligand:
    - added attribute `local_elements` (elements in the first coordination sphere).
        - added function `self.get_local_elements()`
    - added output properties to write_to_mol_dict():
        - `stoichiometry`
        - `local_elements`
        - `original_metal_symbol`
    - removed all properties except CSD_code from `global_properties` (which previously were inherited from the complex, which doesn't make sense for most of them)
    - refactored `self.read_from_mol_dict()` using `**kwargs` instead of `if... else`.

main_tmQMG_test:
    - not yet finished - everything is done only from the point on where tmQMG.json exists. This will be improved after christmas.
    - added filters of complexes before ligand extraction
        - filter out all not fully connected complexes (n~2k)
        - remove node and edge features from graph except `node_label`
        - turning all graphs from `nx.Multigraph` into `nx.Graph` because multigraphs don't make sense for molecules

performance:
    - replaced usage of `mendeleev.element()` with `pymatgen.Element()` because this is much faster
    - deleted unnecessary information from graph because this was a main issue for memory

### Notes

    - most changes are just adding information which might be useful to have for debugging, statistics, analysis etc.
    - only 3 breaking changes:
        - new format of atomic_props    --> breaking only for charge assignment, not assembly
        - `original_metal` and `original_metal_symbol` deleted for unique ligands   --> breaking only in assembly because current metals_of_interest filter did not take into account multiple metals for one unique ligand
        - most global_props deleted from ligands, but only the unnecessary ones
    - the `unique_ligand_name` of ligands will change again
        - since the order of ligands is deterministic now, the only way the `unique_ligand_name` will change in the future is if we add/ remove complexes from the input


## 06.01.23 Fix breaking changes and add ligand charges (version 1.1 by Timo)

### Possibly breaking changes:

    - renamed property `unique_ligand_name` to `unique_name` in all ligands, unique ligands and ligands of complexes.
        - this actually is a fix, the property was called `unique_name` in the `test.json` that Felix gave us. So this should actually fix a breaking change from the last update, not break anything.
    - There was another breaking change I didn't notice in the last update: The stoichiometry string is calculated slightly different now, i.e. if an element occurs only once in the stoichiometry, the number 1 is now dropped, previously it was written as well. I decided for now to leave it as it is now since this is the most frequently used standard of writing the stoichiometry.
        - This will not break any on-the-fly comparisons of the stoichiometries of molecules since both of them will have changed in the same way.
        - I have not found any mention of the stoichiometry in the assembly scripts so I think this should not be broken either.
        - The only way this can break things is when comparing the stoichiometry of a molecule with the stoichiometry in some other database, csv file etc where the old stoichiometry is recorded. I think the only thing this will break is that the csv file of benchmarked charges will have slightly different looking stoichiometry strings now. I will have to update this soon anyway, because e.g. the unique_name property changed as well, so I will also update the stoichiometry strings.
        - If you think this change is an issue please tell me and I'm happy to roll it back!

### Other changes

    - Added ligand charge properties to ligands and unique ligands (currently calculated using only the linear charge solver (LCS) but Cian's method is easy to add):
        - `pred_charge` (int)                    --> charge of the ligand calculated using the LCS
        - `pred_charge_is_confident` (bool)      --> whether the charge is predicted with confidence. If this is False, the ligand should be excluded from the assembly process.
        - `global_props`:
            - `LCS_pred_charge` (int)            --> charge of the ligand calculated using the LCS
            - `LCS_pred_charge_confidence` (float in range [0, 1])    --> the confidence of the LCS in the charge prediction, higher is more confident
            - `LCS_pred_charge_is_confident` (bool)                   --> whether the charge is predicted confidently by the LCS
        - Note: Because the charge is currently calculated using only the LCS, the properties `pred_charge` and `pred_charge_is_confident` are the same in the ligand and in the `global_props` of the ligand (prepended by `LCS_`). If we add Cian's charge calculation and e.g. take only the subset where they agree, this will start to differ. I tried to make it the most general and flexible here.

### Note

    - For the assembly process:
        - In the `global_props` of the original unique_ligands file which Felix generated ages ago and which was used for the assembly there was a `charge` property. However, this was not the charge of the ligand. It was the charge inherited from the complex of origin of the ligand which has been deleted in the last update from the 22.12.22, because we considered this inheritance of global properties from the complex to the ligand to not convey useful information. Please do not confuse this with the now added information of the ligand charges.
        - Before using the unique_ligands in the assembly it is important to filter them by 'pred_charge_is_confident' and exclude all unique ligands where this is False. For the sake of completeness I decided to not already exclude the ligands without confident charges but to keep all unique ligands in the database and insert this information as property for later filtering.
    - General:
        - I decided to add a version number to each update of the databases, so that there is no confusion with which file is the most recent one. This will be added to the filenames of the files which I send you as '_v1.1' for this update. For now this is not coded, only added when I send you the files. As soon as I refactor it I will implement this more properly.


## 08.01.23 Revert stoichiometry string and update charge benchmark csv (version 1.2 by Timo)

### Possibly breaking changes

    - The property `stoichiometry` of each ligand is now back to as it was before the last update. This means, if an element occurs once, the number 1 is written in the stoichiometry string instead of being dropped. This is for backwards compatibility.
        - Note: Due to this change, the stoichiometry string is now slightly different than the usual standard. E.g. if one uses the ASE molecule to get the stoichiometry, it will be different because the 1 is dropped there. Therefore, please always use the property stoichiometry instead of re-calculating the stoichiometry!

### Updated ligand charge benchmark files

    - Since the `unique_name`, `name` and `graph_hash` property of the ligands changed with the latest updates, the corresponding columns in the charge benchmark csv (`all_ligand_charges_with_high_confidence_v1.2.csv`) were updated.
        - The updated files now have the same version number as the rest of the database (here v1.2) since they depend on the database and possibly need to be updated together.
        - Comment: I checked that the `graph_hash` actually didn't change in this update, which is expected because we didn't change the graph creation method. Around 16% of the `unique_name` and the `name` properties changed, which has its reason in the non-deterministic order of the ligands in the database creation before.
    - I also added the property `local_elements` to the csv, which is a list of the elements which are coordinated to the metal.
    - The number of confidently benchmarked ligands decreased from I think 274 before to 235 now.
        - This is because in the ligand extraction process, we added a filter to exclude all complexes with not fully connected graphs, since these are likely to be faulty. Some of the ligands which were benchmarked came from these complexes which are not part of the database anymore. However, this will change again once we improve the graph creation method and hopefully need to exclude less complexes.
    - I doublechecked that the accuracy of the linear charge solver on the charge benchmark dataset is still similar as before (0.92, but we know that there are some faulty entries in there which have not yet been corrected, then it should be close to 100%).
    - The charge benchmark files are uploaded to github under `CreateTMC/database/ligand_charges/charge_benchmark/`


## 31.01.23 Use ASE cutoff graphs, improve the denticities and add some interesting properties (version 1.3 by Timo)

Please update your input file of the assembly to the latest unique ligand db: `full_ligand_db_v1.3.json`.
Additionally to upping the version number from 1.2 to 1.3, this time I also renamed the ligand database file slightly to make them more general (see logs below) for the soonish upgrade from the tmQMg to the CSD. Since you need to change the paths anyway due to the version update, I thought this would be no issue. If you think this is an issue, please tell me and feel free to rename the files.

### Possibly breaking changes

    - property `Metal_q` of a complex was shifted to global_props and renamed to `metal_partial_charge`. It is now optional and will be ignored if no partial charges are present.
        - should not break anything since we don't use the partial charges anymore
    - renamed the full ligand db and the unique ligand db to make the names more general since we will soon upgrade from the tmQMg to the CSD
        - tmQM_Ligands_full_v1.3.json --> full_ligand_db_v1.3.json
        - tmQM_Ligands_unique_v1.3.json --> unique_ligand_db_v1.3.json


### Improved properties
    - all molecules:
        - graph_dict    --> The graphs are no longer the tmQMg graphs, but are now calculated using the ASE cutoffs
    - unique_ligands:
        - The unique ligand representative out of all ligands with the same graph hash is now chosen such that it is one of the ligands with the most common denticity. Previously we just chose the first ligand, which of course would have a high likelihood to have the most common denticity, but it was not guaranteed.
    - absolutely all ligands are extracted
        - There is no longer a maximum denticity of extracted ligands, all ligands will be extracted. This was the case for a few complexes before but it's not useful anymore.

### Added properties:

    - complexes:
        - global_props:
            - molecular_weight      --> there already is a property called molecular_mass calculated from the tmQM which is basically the same
            - metal_partial_charge  --> see above
            - n_ligands
            - n_ligands_occurring_once  --> number of ligands of this complex which occur only once in the entire dataset, potentially interesting for debugging the LCS
            - frac_ligands_occurring_once  --> n_ligands_occurring_once / n_ligands
    - all ligands (i.e. ligands in the full_ligands db, the unique ligand db and the ligands attached to each complex in the complex db)
        - global_props:
            - n_atoms
            - molecular_weight
    - unique ligands
        - chosen_denticity_fraction     --> The fraction of how often the chosen denticity for this unique ligand appears in the list of denticities of all same ligands of this unique ligand. Maybe useful as a prefilter to exclude unique ligands with unsafe denticity.
            - this property was also added to the `unique_ligand_information` of the ligands in the full_ligand db and the complexes db.
